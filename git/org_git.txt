######### Professional Git & GitHub Workflow Guide ##########

=> Setup & Configuration - Getting Started
In professional environments, consistent Git configuration is essential for team collaboration:

code:
--------------------------------------------------------------------
git config --global user.name "Jane Doe"
git config --global user.email "jane.doe@company.com"
--------------------------------------------------------------------

=> Industry Example: Most companies require using your company email and real name to maintain accountability and proper commit attribution.

code:
---------------------------------------------------------------------
# Configure line ending behavior for cross-platform teams
git config --global core.autocrlf input    # For macOS/Linux
git config --global core.autocrlf true     # For Windows
----------------------------------------------------------------------

=> When starting a new project:

code:
----------------------------------------------------------------------
git init
git remote add origin https://github.com/company/project.git
----------------------------------------------------------------------

=> Industry Example: When joining an existing project:

code:
----------------------------------------------------------------------
git clone https://github.com/company/project.git
cd project
----------------------------------------------------------------------


=> Basic Workflow - Daily Development
Professional developers regularly check status:

code:
----------------------------------------------------------------------
git status
# Shows you're working on feature-login branch with 3 modified files
----------------------------------------------------------------------

=> Staging changes strategically:

code:
----------------------------------------------------------------------
# Stage specific files (preferred in industry)
git add src/components/LoginForm.js
git add tests/LoginForm.test.js

# Sometimes necessary to stage all changes
git add .
----------------------------------------------------------------------

=> Industry Best Practice: Commit atomically (one logical change per commit):

code:
----------------------------------------------------------------------
git commit -m "Add password validation to login form"
----------------------------------------------------------------------

=> Bad Commit Message: "Fixed stuff"
=> Good Commit Message: "Fix race condition in authentication service"

Review history to understand project evolution:

code:
----------------------------------------------------------------------
git log
git log --oneline --graph --decorate  # Visualize branch history
----------------------------------------------------------------------

Branching & Merging - Team Collaboration
Industry teams use branching strategies:

code:
----------------------------------------------------------------------
# Create a feature branch from main
git checkout main
git pull
git checkout -b feature/user-authentication

# After work is complete
git add .
git commit -m "Implement OAuth2 authentication flow"

# Prepare for team review
git push origin feature/user-authentication
----------------------------------------------------------------------

=> Example Workflow: After code review in GitHub:

code:
----------------------------------------------------------------------
# Return to main branch
git checkout main
git pull  # Get latest changes

# Merge the approved feature
git merge feature/user-authentication
git push origin main

# Clean up
git branch -d feature/user-authentication
----------------------------------------------------------------------

=> Remote Repositories - Collaboration at Scale
   Working with multiple remotes (common in open source):

code:
----------------------------------------------------------------------
# Add the original repository as "upstream"
git remote add upstream https://github.com/original/project.git

# Sync with upstream
git fetch upstream
git merge upstream/main
----------------------------------------------------------------------

=> Pushing work for review:

code:
----------------------------------------------------------------------
git push origin feature/api-improvements
# Then create Pull Request in GitHub UI
----------------------------------------------------------------------

=> Safely getting team changes:

code:
----------------------------------------------------------------------
# Fetch without merging to inspect changes
git fetch origin
git log HEAD..origin/main  # See what's new

# When ready to incorporate changes
git pull origin main
----------------------------------------------------------------------

=> Advanced Collaboration Examples
   Feature Branches with Code Review:

code:
----------------------------------------------------------------------
# Start new feature
git checkout -b feature/payment-gateway

# Make changes, then create small, focused commits
git add src/payment/
git commit -m "Add PayPal integration module"
git add tests/payment/
git commit -m "Add tests for PayPal payment flow"

# Push for review
git push origin feature/payment-gateway
# Create PR in GitHub, await review, address feedback
----------------------------------------------------------------------

=> Handling Merge Conflicts:

code:
----------------------------------------------------------------------
git pull origin main
# CONFLICT: src/services/user.js
# Edit the file to resolve conflicts
git add src/services/user.js
git commit -m "Resolve merge conflict in user service"
----------------------------------------------------------------------